{"version":3,"file":"vue-truncate-collapsed.min.js","sources":["../src/truncate.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div v-if=\"!show && type !== 'html'\">\r\n      <span :class=\"textClass\">\r\n        {{ truncate(text) }}\r\n      </span>\r\n      <a\r\n        v-if=\"text.length >= length\"\r\n        :class=\"actionClass\"\r\n        @click=\"toggle()\">{{ clamp }}</a>\r\n    </div>\r\n    <div v-else-if=\"!show && type === 'html'\">\r\n      <span\r\n        :class=\"textClass\"\r\n        v-html=\"truncate(text)\" />\r\n      <a\r\n        v-if=\"text.length >= length\"\r\n        :class=\"actionClass\"\r\n        @click=\"toggle()\">{{ clamp }}</a>\r\n    </div>\r\n    <div v-if=\"show && type !== 'html'\">\r\n      <span>{{ text }}</span>\r\n      <a\r\n        v-if=\"text.length >= length\"\r\n        :class=\"actionClass\"\r\n        @click=\"toggle()\">{{ less }}</a>\r\n    </div>\r\n    <div v-else-if=\"show && type === 'html'\">\r\n      <div\r\n        v-if=\"text.length >= length\"\r\n        v-html=\"text\" />\r\n      <a\r\n        v-if=\"text.length >= length\"\r\n        :class=\"actionClass\"\r\n        @click=\"toggle()\">{{ less }}</a>\r\n      <p v-else>\r\n        {{ h2p(text) }}\r\n      </p>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nconst h2p = require('truncate-html');\r\n\r\nexport default {\r\n  name: 'Truncate',\r\n\r\n  props: {\r\n    collapsedTextClass: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n    text: {\r\n      type: String,\r\n      required: true,\r\n    },\r\n    clamp: {\r\n      type: String,\r\n      default: 'Read More',\r\n    },\r\n    length: {\r\n      type: Number,\r\n      default: 100,\r\n    },\r\n    less: {\r\n      type: String,\r\n      default: 'Show Less',\r\n    },\r\n    type: {\r\n      type: String,\r\n      default: 'text',\r\n    },\r\n    actionClass: {\r\n      type: String,\r\n      default: '',\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      show: false,\r\n      counter: this.length,\r\n    };\r\n  },\r\n  computed: {\r\n    textClass() {\r\n      return (this.text.length > this.length && this.collapsedTextClass) ? this.collapsedTextClass : '';\r\n    },\r\n  },\r\n  methods: {\r\n    truncate(string) {\r\n      if (string) {\r\n        if (this.type === 'html') return h2p(string, this.length, { reserveLastWord: true, excludes: ['img', 'pre', 'script', 'object', 'embed', 'link'] });\r\n\r\n        return string.toString().substring(0, this.length);\r\n      }\r\n\r\n      return '';\r\n    },\r\n    toggle() {\r\n      const toggled = !this.show;\r\n\r\n      this.show = toggled;\r\n      this.$emit('toggle', toggled);\r\n    },\r\n\r\n    h2p(text) {\r\n      return h2p(text);\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n  a {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n"],"names":["const","h2p","require","render","String","Number","this","length","text","collapsedTextClass","string","type","reserveLastWord","excludes","toString","substring","toggled","show","$emit"],"mappings":";;;;;iMAAA,4SAAA,GA2CAA,IAAMC,EAAMC,QAAQ,wBAEJC,skCACR,2CAIIC,eACG,eAGHA,iBACI,eAGJA,eACG,0BAGHC,eACG,gBAGHD,eACG,wBAGHA,eACG,0BAGHA,eACG,kCAKH,UACGE,KAAKC,+CAKND,KAAKE,KAAKD,OAASD,KAAKC,QAAUD,KAAKG,mBAAsBH,KAAKG,mBAAqB,gCAIxFC,UACHA,EACgB,SAAdJ,KAAKK,KAAwBV,EAAIS,EAAQJ,KAAKC,QAAUK,iBAAiB,EAAMC,UAAW,MAAO,MAAO,SAAU,SAAU,QAAS,UAElIH,EAAOI,WAAWC,UAAU,EAAGT,KAAKC,QAGtC,0BAGDS,GAAWV,KAAKW,UAEjBA,KAAOD,OACPE,MAAM,SAAUF,iBAGnBR,UACKP,EAAIO"}